{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/rosyazad/code/root/imports/api/factories.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/api/factories.js","filename":"/Users/rosyazad/code/root/imports/api/factories.js","passPerPreset":false,"envName":"development","cwd":"/Users/rosyazad/code/root","root":"/Users/rosyazad/code/root","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/rosyazad/code/root/imports/api/factories.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/api/factories.js"}},"code":"module.export({\n  Factories: function () {\n    return Factories;\n  }\n});\nvar Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 1);\nvar check;\nmodule.link(\"meteor/check\", {\n  check: function (v) {\n    check = v;\n  }\n}, 2);\nvar Factories = new Mongo.Collection('factories');\nMeteor.methods({\n  'factories.insertRoot': function (data) {\n    //if(Factories.findOne({path : '/root'} != undefined)){\n    Factories.insert({\n      path: '/root',\n      type: 'folder',\n      isRoot: true // children: [],\n\n    }); //}\n  },\n  'factories.remove': function (factoryId) {\n    check(factoryId, String);\n    var factory = Factories.findOne(factoryId);\n\n    if (factory.children != undefined) {\n      factory.children.forEach(function (child) {\n        Factories.remove({\n          path: child\n        });\n      });\n    }\n\n    Factories.remove(factoryId);\n    Factories.update({\n      path: '/root'\n    }, {\n      $pull: {\n        children: factory.path\n      }\n    });\n  },\n  'factories.insertChildNodes': function (factoryId, childNodeCount, minValue, maxValue) {\n    //   Factories.update({_id: factoryId}, {minValue: minValue, maxValue:maxValue})\n    var factory = Factories.findOne(factoryId);\n\n    if (factory.children != undefined) {\n      factory.children.forEach(function (child) {\n        Factories.update({\n          path: factory.path\n        }, {\n          $pull: {\n            children: child\n          }\n        });\n        Factories.remove({\n          path: child\n        });\n      });\n    } //var limit = 10,\n    // amount = 3,\n    // lower_bound = 1,\n    // upper_bound = 20,\n\n\n    uniqueRandomNumbers = []; //if (amount > limit) limit = amount; //Infinite loop if you want more unique\n    //Natural numbers than exist in a\n    // given range\n\n    while (uniqueRandomNumbers.length < childNodeCount) {\n      var random_number = Math.floor(Math.random() * (maxValue - minValue) + minValue);\n\n      if (uniqueRandomNumbers.indexOf(random_number) == -1) {\n        // Yay! new random number\n        uniqueRandomNumbers.push(random_number);\n      }\n    }\n\n    for (var i = 0; i < uniqueRandomNumbers.length; i++) {\n      Factories.update({\n        _id: factoryId\n      }, {\n        $push: {\n          children: factory.path + '/' + uniqueRandomNumbers[i]\n        }\n      });\n      Factories.insert({\n        path: factory.path + '/' + uniqueRandomNumbers[i],\n        type: 'file'\n      });\n    } // for (var i = 0; i < childNodeCount; i++) {\n    //     var min = minValue;\n    //     var max = maxValue;\n    //     var childNode = Math.floor(Math.random() * (max - min + 1)) + min;\n    //     Factories.update({ _id: factoryId }, { $push: { children: factory.path + '/' + childNode } });\n    //     Factories.insert({\n    //         path: factory.path + '/' + childNode,\n    //         type: 'file'\n    //     });\n    // }\n\n  },\n  'factories.insertFactory': function (text, min, max) {\n    check(text, String);\n\n    if (text == 'root') {\n      throw new Meteor.Error('root cannot be a factory name ');\n    } else if (text == '') {\n      throw new Meteor.Error('Please insert to add factory');\n    } else if (Factories.findOne({\n      path: '/root/' + text\n    })) {\n      throw new Meteor.Error('Factory with same name present');\n    } else {\n      Factories.update({\n        path: '/root'\n      }, {\n        $push: {\n          children: '/root/' + text\n        }\n      });\n      Factories.insert({\n        path: '/root/' + text,\n        type: 'folder',\n        minValue: min,\n        maxValue: max\n      });\n    } // Make sure the user is logged in before inserting a task\n    // if (! this.userId) {\n    //     throw new Meteor.Error('not-authorized');\n    // }\n    //const rootNode = Factories.findOne('\"NT3PZRMBbkMHu2Dqj');\n    //Factories.update(\"NT3PZRMBbkMHu2Dqj\", { $set: { priority: priorityNumber } });\n    //     Factories.insert({\n    //         path: '/root',\n    //         type: 'folder',\n    //         isRoot: true,\n    //         children: ['/root/david', '/root/jslancer'],\n    //     });\n    //     Factories.insert({\n    //         path: '/root/david',\n    //         type: 'folder',\n    //         children: ['/root/david/1', '/root/david/2', '/root/david/3'],\n    //     });\n    //     Factories.insert({\n    //         path: '/root/david/1',\n    //         type: 'file'\n    //     });\n    //     Factories.insert({\n    //         path: '/root/david/2',\n    // type: 'file'\n    //     });\n    //     Factories.insert({\n    //         path: '/root/david/3',\n    //         type: 'file'\n    //     });\n    //     Factories.insert({\n    //         path: '/root/jslancer',\n    //         type: 'folder',\n    //         children: ['/root/jslancer/132', '/root/jslancer/12'],\n    //     });\n    //     Factories.insert({\n    //         path: '/root/jslancer/132',\n    // type: 'file'\n    //     });\n    //     Factories.insert({\n    //         path: '/root/jslancer/12',\n    //         type: 'file'\n    //     });\n\n  }\n});","map":{"version":3,"sources":["imports/api/factories.js"],"names":["module","export","Factories","Meteor","link","v","Mongo","check","Collection","methods","data","insert","path","type","isRoot","factoryId","String","factory","findOne","children","undefined","forEach","child","remove","update","$pull","childNodeCount","minValue","maxValue","uniqueRandomNumbers","length","random_number","Math","floor","random","indexOf","push","i","_id","$push","text","min","max","Error"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { check } from 'meteor/check';\n\n\nexport const Factories = new Mongo.Collection('factories');\n\nMeteor.methods({\n    'factories.insertRoot'(data) {\n        //if(Factories.findOne({path : '/root'} != undefined)){\n        Factories.insert({\n            path: '/root',\n            type: 'folder',\n            isRoot: true,\n            // children: [],\n        });\n        //}\n    },\n\n    'factories.remove'(factoryId) {\n        check(factoryId, String);\n\n        const factory = Factories.findOne(factoryId);\n\n        if (factory.children != undefined) {\n            factory.children.forEach(function (child) {\n                Factories.remove({ path: child });\n            });\n        }\n\n\n        Factories.remove(factoryId);\n        Factories.update({ path: '/root' }, { $pull: { children: factory.path } });\n\n    },\n    'factories.insertChildNodes'(factoryId, childNodeCount, minValue, maxValue) {\n        //   Factories.update({_id: factoryId}, {minValue: minValue, maxValue:maxValue})\n        const factory = Factories.findOne(factoryId);\n\n\n        if (factory.children != undefined) {\n\n            factory.children.forEach(function (child) {\n                Factories.update({ path: factory.path }, { $pull: { children: child } });\n                Factories.remove({ path: child });\n            });\n\n        }\n\n\n        //var limit = 10,\n           // amount = 3,\n            // lower_bound = 1,\n            // upper_bound = 20,\n            uniqueRandomNumbers = [];\n\n        //if (amount > limit) limit = amount; //Infinite loop if you want more unique\n        //Natural numbers than exist in a\n        // given range\n        while (uniqueRandomNumbers.length < childNodeCount) {\n            var random_number = Math.floor(Math.random() * (maxValue - minValue) + minValue);\n            if (uniqueRandomNumbers.indexOf(random_number) == -1) {\n                // Yay! new random number\n                uniqueRandomNumbers.push(random_number);\n            }\n        }\n        for (var i = 0; i < uniqueRandomNumbers.length; i++) {\n            \n\n            Factories.update({ _id: factoryId }, { $push: { children: factory.path + '/' + uniqueRandomNumbers[i] } });\n            Factories.insert({\n                path: factory.path + '/' + uniqueRandomNumbers[i],\n                type: 'file'\n            });\n        }\n\n\n\n\n        // for (var i = 0; i < childNodeCount; i++) {\n        //     var min = minValue;\n        //     var max = maxValue;\n        //     var childNode = Math.floor(Math.random() * (max - min + 1)) + min;\n\n        //     Factories.update({ _id: factoryId }, { $push: { children: factory.path + '/' + childNode } });\n        //     Factories.insert({\n        //         path: factory.path + '/' + childNode,\n        //         type: 'file'\n        //     });\n        // }\n\n\n    },\n\n    'factories.insertFactory'(text, min, max) {\n\n        check(text, String);\n\n        if (text == 'root') {\n            throw new Meteor.Error('root cannot be a factory name ');\n        }\n        else if (text == '') {\n            throw new Meteor.Error('Please insert to add factory');\n        }\n        else if (Factories.findOne({ path: '/root/' + text })) {\n            throw new Meteor.Error('Factory with same name present');\n        }\n        else {\n\n            Factories.update({ path: '/root' }, { $push: { children: '/root/' + text } });\n\n            Factories.insert({\n                path: '/root/' + text,\n                type: 'folder',\n                minValue: min,\n                maxValue: max\n            });\n        }\n\n\n        // Make sure the user is logged in before inserting a task\n        // if (! this.userId) {\n        //     throw new Meteor.Error('not-authorized');\n        // }\n        //const rootNode = Factories.findOne('\"NT3PZRMBbkMHu2Dqj');\n        //Factories.update(\"NT3PZRMBbkMHu2Dqj\", { $set: { priority: priorityNumber } });\n\n\n        //     Factories.insert({\n        //         path: '/root',\n        //         type: 'folder',\n        //         isRoot: true,\n        //         children: ['/root/david', '/root/jslancer'],\n        //     });\n\n\n        //     Factories.insert({\n        //         path: '/root/david',\n        //         type: 'folder',\n        //         children: ['/root/david/1', '/root/david/2', '/root/david/3'],\n        //     });\n        //     Factories.insert({\n        //         path: '/root/david/1',\n        //         type: 'file'\n        //     });\n        //     Factories.insert({\n        //         path: '/root/david/2',\n        // type: 'file'\n        //     });\n        //     Factories.insert({\n        //         path: '/root/david/3',\n        //         type: 'file'\n        //     });\n        //     Factories.insert({\n        //         path: '/root/jslancer',\n        //         type: 'folder',\n        //         children: ['/root/jslancer/132', '/root/jslancer/12'],\n        //     });\n        //     Factories.insert({\n        //         path: '/root/jslancer/132',\n        // type: 'file'\n        //     });\n        //     Factories.insert({\n        //         path: '/root/jslancer/12',\n        //         type: 'file'\n        //     });\n    },\n})\n\n"]},"sourceType":"script","hash":"c8036d59bd21cd31548c8351d41d9d4f3d8d16c9"}
