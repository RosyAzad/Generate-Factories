{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/rosyazad/code/root/imports/ui/Tree.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"imports/ui/Tree.js","filename":"/Users/rosyazad/code/root/imports/ui/Tree.js","passPerPreset":false,"envName":"development","cwd":"/Users/rosyazad/code/root","root":"/Users/rosyazad/code/root","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/rosyazad/code/root/imports/ui/Tree.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/ui/Tree.js"}},"code":"module.export({\n  default: () => Tree\n});\nlet React, Component;\nmodule.link(\"react\", {\n  default(v) {\n    React = v;\n  },\n\n  Component(v) {\n    Component = v;\n  }\n\n}, 0);\nlet values;\nmodule.link(\"lodash/values\", {\n  default(v) {\n    values = v;\n  }\n\n}, 1);\nlet PropTypes;\nmodule.link(\"prop-types\", {\n  default(v) {\n    PropTypes = v;\n  }\n\n}, 2);\nlet TreeNode;\nmodule.link(\"./TreeNode\", {\n  default(v) {\n    TreeNode = v;\n  }\n\n}, 3);\nconst data = {\n  '/root': {\n    path: '/root',\n    type: 'folder',\n    isRoot: true,\n    children: ['/root/david', '/root/jslancer']\n  },\n  '/root/david': {\n    path: '/root/david',\n    type: 'folder',\n    children: ['/root/david/readme.md']\n  },\n  '/root/david/readme.md': {\n    path: '/root/david/readme.md',\n    type: 'file',\n    content: 'Thanks for reading me me. But there is nothing here.'\n  },\n  '/root/jslancer': {\n    path: '/root/jslancer',\n    type: 'folder',\n    children: ['/root/jslancer/projects', '/root/jslancer/vblogs']\n  },\n  '/root/jslancer/projects': {\n    path: '/root/jslancer/projects',\n    type: 'folder',\n    children: ['/root/jslancer/projects/treeview']\n  },\n  '/root/jslancer/projects/treeview': {\n    path: '/root/jslancer/projects/treeview',\n    type: 'folder',\n    children: []\n  },\n  '/root/jslancer/vblogs': {\n    path: '/root/jslancer/vblogs',\n    type: 'folder',\n    children: []\n  }\n};\n\nclass Tree extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      nodes: data\n    };\n\n    this.getRootNodes = () => {\n      const {\n        nodes\n      } = this.state;\n      return values(nodes).filter(node => node.isRoot === true);\n    };\n\n    this.getChildNodes = node => {\n      const {\n        nodes\n      } = this.state;\n      if (!node.children) return [];\n      return node.children.map(path => nodes[path]);\n    };\n\n    this.onToggle = node => {\n      const {\n        nodes\n      } = this.state;\n      nodes[node.path].isOpen = !node.isOpen;\n      this.setState({\n        nodes\n      });\n    };\n\n    this.onNodeSelect = node => {\n      const {\n        onSelect\n      } = this.props;\n      onSelect(node);\n    };\n  }\n\n  render() {\n    const rootNodes = this.getRootNodes();\n    return React.createElement(\"div\", null, rootNodes.map(node => React.createElement(TreeNode, {\n      node: node,\n      getChildNodes: this.getChildNodes,\n      onToggle: this.onToggle,\n      onNodeSelect: this.onNodeSelect\n    })));\n  }\n\n}\n\nTree.propTypes = {\n  onSelect: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["imports/ui/Tree.js"],"names":["module","export","default","Tree","React","Component","link","v","values","PropTypes","TreeNode","data","path","type","isRoot","children","content","state","nodes","getRootNodes","filter","node","getChildNodes","map","onToggle","isOpen","setState","onNodeSelect","onSelect","props","render","rootNodes","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport values from 'lodash/values';\nimport PropTypes from 'prop-types';\n\nimport TreeNode from './TreeNode';\n\nconst data = {\n  '/root': {\n    path: '/root',\n    type: 'folder',\n    isRoot: true,\n    children: ['/root/david', '/root/jslancer'],\n  },\n  '/root/david': {\n    path: '/root/david',\n    type: 'folder',\n    children: ['/root/david/readme.md'],\n  },\n  '/root/david/readme.md': {\n    path: '/root/david/readme.md',\n    type: 'file',\n    content: 'Thanks for reading me me. But there is nothing here.'\n  },\n  '/root/jslancer': {\n    path: '/root/jslancer',\n    type: 'folder',\n    children: ['/root/jslancer/projects', '/root/jslancer/vblogs'],\n  },\n  '/root/jslancer/projects': {\n    path: '/root/jslancer/projects',\n    type: 'folder',\n    children: ['/root/jslancer/projects/treeview'],\n  },\n  '/root/jslancer/projects/treeview': {\n    path: '/root/jslancer/projects/treeview',\n    type: 'folder',\n    children: [],\n  },\n  '/root/jslancer/vblogs': {\n    path: '/root/jslancer/vblogs',\n    type: 'folder',\n    children: [],\n  },\n};\n\nexport default class Tree extends Component {\n\n  state = {\n    nodes: data,\n  };\n\n  getRootNodes = () => {\n    const { nodes } = this.state;\n    return values(nodes).filter(node => node.isRoot === true);\n  }\n\n  getChildNodes = (node) => {\n    const { nodes } = this.state;\n    if (!node.children) return [];\n    return node.children.map(path => nodes[path]);\n  }  \n\n  onToggle = (node) => {\n    const { nodes } = this.state;\n    nodes[node.path].isOpen = !node.isOpen;\n    this.setState({ nodes });\n  }\n\n  onNodeSelect = node => {\n    const { onSelect } = this.props;\n    onSelect(node);\n  }\n\n  render() {\n    const rootNodes = this.getRootNodes();\n    return (\n      <div>\n        { rootNodes.map(node => (\n          <TreeNode \n            node={node}\n            getChildNodes={this.getChildNodes}\n            onToggle={this.onToggle}\n            onNodeSelect={this.onNodeSelect}\n          />\n        ))}\n      </div>\n    )\n  }\n}\n\nTree.propTypes = {\n  onSelect: PropTypes.func.isRequired,\n};"]},"sourceType":"script","hash":"3be061586afb39c2197d5651b9bd682466f8e718"}
