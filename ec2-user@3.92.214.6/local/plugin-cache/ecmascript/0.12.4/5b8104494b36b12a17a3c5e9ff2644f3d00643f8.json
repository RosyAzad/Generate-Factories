{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/rosyazad/code/root/imports/api/factories.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/api/factories.js","filename":"/Users/rosyazad/code/root/imports/api/factories.js","passPerPreset":false,"envName":"development","cwd":"/Users/rosyazad/code/root","root":"/Users/rosyazad/code/root","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/rosyazad/code/root/imports/api/factories.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/api/factories.js"}},"code":"module.export({\n  Factories: () => Factories\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 1);\nlet check;\nmodule.link(\"meteor/check\", {\n  check(v) {\n    check = v;\n  }\n\n}, 2);\nconst Factories = new Mongo.Collection('factories');\nMeteor.methods({\n  'factories.remove'(factoryId) {\n    check(factoryId, String);\n    const factory = Factories.findOne(factoryId); // if (task.private && task.owner !== this.userId) {\n    //     // If the task is private, make sure only the owner can delete it\n    //     throw new Meteor.Error('not-authorized');\n    // }\n    //factoryIds =factoryId+\"dew\";\n\n    if (factory.children != undefined) {\n      factory.children.forEach(function (child) {\n        Factories.remove({\n          path: child\n        });\n      });\n    }\n\n    Factories.remove(factoryId);\n    Factories.update({\n      path: '/root'\n    }, {\n      $pull: {\n        children: factory.path\n      }\n    });\n  },\n\n  'factories.insertChildNodes'(factoryId, childNodeCount) {\n    for (var i = 0; i < childNodeCount; i++) {\n      var childNode = Math.random() * (100 - 90) + 90;\n      Factories.update({\n        _id: factoryId\n      }, {\n        $push: {\n          children: '/root/' + childNode\n        }\n      });\n      Factories.insert({\n        path: '/root/' + childNode,\n        type: 'file'\n      });\n    }\n  },\n\n  'factories.insertFactory'(text) {\n    check(text, String);\n\n    if (text == 'root') {\n      throw new Meteor.Error('root cannot be a factory name ');\n    } else if (text == '') {\n      throw new Meteor.Error('Please insert to add factory');\n    } else if (Factories.findOne({\n      path: '/root/' + text\n    })) {\n      throw new Meteor.Error('Factory with same name present');\n    } else {\n      Factories.update({\n        path: '/root'\n      }, {\n        $push: {\n          children: '/root/' + text\n        }\n      });\n      Factories.insert({\n        path: '/root/' + text,\n        type: 'folder'\n      });\n    } // Make sure the user is logged in before inserting a task\n    // if (! this.userId) {\n    //     throw new Meteor.Error('not-authorized');\n    // }\n    //const rootNode = Factories.findOne('\"NT3PZRMBbkMHu2Dqj');\n    //Factories.update(\"NT3PZRMBbkMHu2Dqj\", { $set: { priority: priorityNumber } });\n    //     Factories.insert({\n    //         path: '/root',\n    //         type: 'folder',\n    //         isRoot: true,\n    //         children: ['/root/david', '/root/jslancer'],\n    //     });\n    //     Factories.insert({\n    //         path: '/root/david',\n    //         type: 'folder',\n    //         children: ['/root/david/1', '/root/david/2', '/root/david/3'],\n    //     });\n    //     Factories.insert({\n    //         path: '/root/david/1',\n    //         type: 'file'\n    //     });\n    //     Factories.insert({\n    //         path: '/root/david/2',\n    // type: 'file'\n    //     });\n    //     Factories.insert({\n    //         path: '/root/david/3',\n    //         type: 'file'\n    //     });\n    //     Factories.insert({\n    //         path: '/root/jslancer',\n    //         type: 'folder',\n    //         children: ['/root/jslancer/132', '/root/jslancer/12'],\n    //     });\n    //     Factories.insert({\n    //         path: '/root/jslancer/132',\n    // type: 'file'\n    //     });\n    //     Factories.insert({\n    //         path: '/root/jslancer/12',\n    //         type: 'file'\n    //     });\n\n  }\n\n});","map":{"version":3,"sources":["imports/api/factories.js"],"names":["module","export","Factories","Meteor","link","v","Mongo","check","Collection","methods","factoryId","String","factory","findOne","children","undefined","forEach","child","remove","path","update","$pull","childNodeCount","i","childNode","Math","random","_id","$push","insert","type","text","Error"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { check } from 'meteor/check';\n\n \nexport const Factories = new Mongo.Collection('factories');\n\nMeteor.methods({\n    'factories.remove'(factoryId) {\n        check(factoryId, String);\n\n        const factory = Factories.findOne(factoryId);\n        // if (task.private && task.owner !== this.userId) {\n        //     // If the task is private, make sure only the owner can delete it\n        //     throw new Meteor.Error('not-authorized');\n        // }\n\n        //factoryIds =factoryId+\"dew\";\n\n        if(factory.children != undefined){\n        factory.children.forEach(function(child){\n            Factories.remove({path : child});\n        });\n    }\n            \n\n        Factories.remove(factoryId);\n        Factories.update({ path: '/root' },{ $pull: { children: factory.path }});\n\n    },\n    'factories.insertChildNodes'(factoryId,childNodeCount) {\n\n\n       \n        for(var i =0; i<childNodeCount; i++){\n            var childNode = Math.random() * (100 - 90) + 90;\n            Factories.update({_id: factoryId},{ $push: { children: '/root/'+childNode }});\n            Factories.insert({\n                path: '/root/'+childNode,\n                type: 'file'\n            });\n        }\n\n\n    },\n\n    'factories.insertFactory'(text) {\n\n        check(text, String);\n\n        if(text == 'root'){\n            throw new Meteor.Error('root cannot be a factory name ');\n        }\n        else if(text == ''){\n            throw new Meteor.Error('Please insert to add factory');\n        }\n        else if(Factories.findOne({path: '/root/'+text })){\n            throw new Meteor.Error('Factory with same name present');\n        }\n        else{\n\n        Factories.update({ path: '/root' },{ $push: { children: '/root/'+text }});\n\n        Factories.insert({\n            path: '/root/'+text,\n            type: 'folder'\n        });\n    }\n        \n\n        // Make sure the user is logged in before inserting a task\n        // if (! this.userId) {\n        //     throw new Meteor.Error('not-authorized');\n        // }\n//const rootNode = Factories.findOne('\"NT3PZRMBbkMHu2Dqj');\n        //Factories.update(\"NT3PZRMBbkMHu2Dqj\", { $set: { priority: priorityNumber } });\n\n\n    //     Factories.insert({\n    //         path: '/root',\n    //         type: 'folder',\n    //         isRoot: true,\n    //         children: ['/root/david', '/root/jslancer'],\n    //     });\n\n        \n    //     Factories.insert({\n    //         path: '/root/david',\n    //         type: 'folder',\n    //         children: ['/root/david/1', '/root/david/2', '/root/david/3'],\n    //     });\n    //     Factories.insert({\n    //         path: '/root/david/1',\n    //         type: 'file'\n    //     });\n    //     Factories.insert({\n    //         path: '/root/david/2',\n    // type: 'file'\n    //     });\n    //     Factories.insert({\n    //         path: '/root/david/3',\n    //         type: 'file'\n    //     });\n    //     Factories.insert({\n    //         path: '/root/jslancer',\n    //         type: 'folder',\n    //         children: ['/root/jslancer/132', '/root/jslancer/12'],\n    //     });\n    //     Factories.insert({\n    //         path: '/root/jslancer/132',\n    // type: 'file'\n    //     });\n    //     Factories.insert({\n    //         path: '/root/jslancer/12',\n    //         type: 'file'\n    //     });\n    },\n})\n\n"]},"sourceType":"script","hash":"5b8104494b36b12a17a3c5e9ff2644f3d00643f8"}
