{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/rosyazad/code/root/imports/ui/Tree.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"imports/ui/Tree.js","filename":"/Users/rosyazad/code/root/imports/ui/Tree.js","passPerPreset":false,"envName":"development","cwd":"/Users/rosyazad/code/root","root":"/Users/rosyazad/code/root","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/rosyazad/code/root/imports/ui/Tree.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/ui/Tree.js"}},"code":"module.export({\n  default: () => Tree\n});\nlet React, Component;\nmodule.link(\"react\", {\n  default(v) {\n    React = v;\n  },\n\n  Component(v) {\n    Component = v;\n  }\n\n}, 0);\nlet values;\nmodule.link(\"lodash/values\", {\n  default(v) {\n    values = v;\n  }\n\n}, 1);\nlet PropTypes;\nmodule.link(\"prop-types\", {\n  default(v) {\n    PropTypes = v;\n  }\n\n}, 2);\nlet TreeNode;\nmodule.link(\"./TreeNode\", {\n  default(v) {\n    TreeNode = v;\n  }\n\n}, 3);\nlet Menu, Item, Separator, Submenu, MenuProvider;\nmodule.link(\"react-contexify\", {\n  Menu(v) {\n    Menu = v;\n  },\n\n  Item(v) {\n    Item = v;\n  },\n\n  Separator(v) {\n    Separator = v;\n  },\n\n  Submenu(v) {\n    Submenu = v;\n  },\n\n  MenuProvider(v) {\n    MenuProvider = v;\n  }\n\n}, 4);\n//import 'react-contexify/dist/ReactContexify.min.css';\nconst data = {\n  '/root': {\n    path: '/root',\n    type: 'folder',\n    isRoot: true,\n    children: ['/root/david', '/root/jslancer']\n  },\n  '/root/david': {\n    path: '/root/david',\n    type: 'folder',\n    children: ['/root/david/1', '/root/david/2', '/root/david/3']\n  },\n  '/root/david/1': {\n    path: '/root/david/1',\n    type: 'file'\n  },\n  '/root/david/2': {\n    path: '/root/david/2',\n    type: 'file'\n  },\n  '/root/david/3': {\n    path: '/root/david/3',\n    type: 'file'\n  },\n  '/root/jslancer': {\n    path: '/root/jslancer',\n    type: 'folder',\n    children: ['/root/jslancer/132', '/root/jslancer/12']\n  },\n  '/root/jslancer/132': {\n    path: '/root/jslancer/132',\n    type: 'file'\n  },\n  '/root/jslancer/12': {\n    path: '/root/jslancer/12',\n    type: 'file'\n  }\n};\n\nconst onClick = (_ref) => {\n  let {\n    event,\n    props\n  } = _ref;\n  console.log(event, props);\n  console.log(props);\n}; // create your menu first\n\n\nconst MyAwesomeMenu = () => React.createElement(Menu, {\n  node: 1,\n  id: \"menu_id\",\n  style: {\n    border: '1px solid purple',\n    display: 'inline-block'\n  }\n}, React.createElement(Item, {\n  node: 1,\n  onClick: onClick\n}, \"Lorem\"), React.createElement(Item, {\n  onClick: onClick\n}, \"Ipsum\"), React.createElement(Separator, null), React.createElement(Item, {\n  disabled: true\n}, \"Dolor\"), React.createElement(Separator, null), React.createElement(Submenu, {\n  label: \"Foobar\"\n}, React.createElement(Item, {\n  onClick: onClick\n}, \"Foo\"), React.createElement(Item, {\n  onClick: onClick\n}, \"Bar\")));\n\nclass Tree extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      nodes: data\n    };\n\n    this.getRootNodes = () => {\n      const {\n        nodes\n      } = this.state;\n      return values(nodes).filter(node => node.isRoot === true);\n    };\n\n    this.getChildNodes = node => {\n      const {\n        nodes\n      } = this.state;\n      if (!node.children) return [];\n      return node.children.map(path => nodes[path]);\n    };\n\n    this.onToggle = node => {\n      const {\n        nodes\n      } = this.state;\n      nodes[node.path].isOpen = !node.isOpen;\n      this.setState({\n        nodes\n      });\n    };\n\n    this.onNodeSelect = node => {\n      const {\n        onSelect\n      } = this.props;\n      onSelect(node);\n    };\n  }\n\n  render() {\n    const rootNodes = this.getRootNodes();\n    return React.createElement(\"div\", null, React.createElement(MenuProvider, {\n      id: \"menu_id\"\n    }, rootNodes.map(node => React.createElement(\"div\", null, React.createElement(TreeNode, {\n      node: node,\n      getChildNodes: this.getChildNodes,\n      onToggle: this.onToggle,\n      onNodeSelect: this.onNodeSelect\n    }), React.createElement(MyAwesomeMenu, {\n      node: 1\n    })))));\n  }\n\n}\n\nTree.propTypes = {\n  onSelect: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["imports/ui/Tree.js"],"names":["module","export","default","Tree","React","Component","link","v","values","PropTypes","TreeNode","Menu","Item","Separator","Submenu","MenuProvider","data","path","type","isRoot","children","onClick","event","props","console","log","MyAwesomeMenu","border","display","state","nodes","getRootNodes","filter","node","getChildNodes","map","onToggle","isOpen","setState","onNodeSelect","onSelect","render","rootNodes","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport values from 'lodash/values';\nimport PropTypes from 'prop-types';\n\nimport TreeNode from './TreeNode';\n//import ClickHandler from './ClickHandler';\nimport { Menu, Item, Separator, Submenu, MenuProvider } from 'react-contexify';\n//import 'react-contexify/dist/ReactContexify.min.css';\n\nconst data = {\n  '/root': {\n    path: '/root',\n    type: 'folder',\n    isRoot: true,\n    children: ['/root/david', '/root/jslancer'],\n  },\n  '/root/david': {\n    path: '/root/david',\n    type: 'folder',\n    children: ['/root/david/1', '/root/david/2','/root/david/3'],\n  },\n  '/root/david/1': {\n    path: '/root/david/1',\n    type: 'file'\n  },\n  '/root/david/2': {\n    path: '/root/david/2',\n    type: 'file'\n  },\n  '/root/david/3': {\n    path: '/root/david/3',\n    type: 'file'\n  },\n  '/root/jslancer': {\n    path: '/root/jslancer',\n    type: 'folder',\n    children: ['/root/jslancer/132', '/root/jslancer/12'],\n  },\n  '/root/jslancer/132': {\n    path: '/root/jslancer/132',\n    type: 'file'\n  },\n  '/root/jslancer/12': {\n    path: '/root/jslancer/12',\n    type: 'file'\n  },\n};\n\nconst onClick = ({ event, props }) => {console.log(event,props);\nconsole.log(props);}\n// create your menu first\nconst MyAwesomeMenu = () => (\n    <Menu node = {1} id='menu_id' style={{ border: '1px solid purple', display: 'inline-block' }}>\n       <Item node = {1} onClick={onClick}>Lorem</Item>\n       <Item onClick={onClick}>Ipsum</Item>\n       <Separator />\n       <Item disabled>Dolor</Item>\n       <Separator />\n       <Submenu label=\"Foobar\">\n        <Item onClick={onClick}>Foo</Item>\n        <Item onClick={onClick}>Bar</Item>\n       </Submenu>\n    </Menu>\n);\n\nexport default class Tree extends Component {\n\n  state = {\n    nodes: data,\n  };\n\n  getRootNodes = () => {\n    const { nodes } = this.state;\n    return values(nodes).filter(node => node.isRoot === true);\n  }\n\n  getChildNodes = (node) => {\n    const { nodes } = this.state;\n    if (!node.children) return [];\n    return node.children.map(path => nodes[path]);\n  }  \n\n  onToggle = (node) => {\n    const { nodes } = this.state;\n    nodes[node.path].isOpen = !node.isOpen;\n    this.setState({ nodes });\n  }\n\n  onNodeSelect = node => {\n    const { onSelect } = this.props;\n    onSelect(node);\n  }\n\n  render() {\n    const rootNodes = this.getRootNodes();\n    return (\n        <div>\n      <MenuProvider id=\"menu_id\" >\n          \n        { rootNodes.map(node => (\n            <div>\n          <TreeNode \n            node={node}\n            getChildNodes={this.getChildNodes}\n            onToggle={this.onToggle}\n            onNodeSelect={this.onNodeSelect}\n          />\n          <MyAwesomeMenu node={1} />\n          </div>\n        ))}\n         \n      </MenuProvider>\n    \n      </div>\n    )\n  }\n}\n\nTree.propTypes = {\n  onSelect: PropTypes.func.isRequired,\n};"]},"sourceType":"script","hash":"bbb7fa1dd6ce45da549659a1e4bd8bbcc627a597"}
